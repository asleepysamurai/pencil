{
  "name": "pg",
  "version": "0.9.0",
  "description": "PostgreSQL client - pure javascript & libpq with the same API",
  "keywords": [
    "postgres",
    "pg",
    "libpq",
    "postgre",
    "database",
    "rdbms"
  ],
  "homepage": "http://github.com/brianc/node-postgres",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-postgres.git"
  },
  "author": {
    "name": "Brian Carlson",
    "email": "brian.m.carlson@gmail.com"
  },
  "main": "./lib",
  "dependencies": {
    "generic-pool": "2.0.2"
  },
  "scripts": {
    "test": "make test-all connectionString=pg://postgres@localhost:5432/postgres",
    "prepublish": "rm -r build || (exit 0)",
    "install": "node-gyp rebuild || (exit 0)"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "readme": "#node-postgres\n\n[![Build Status](https://secure.travis-ci.org/brianc/node-postgres.png)](http://travis-ci.org/brianc/node-postgres)\n\nNon-blocking PostgreSQL client for node.js.  Pure JavaScript and native libpq bindings.  Active development,  well tested, and production use.\n\n## Installation\n\n    npm install pg\n    \n## Examples\n\n### Simple, using built-in client pool\n\n```javascript\nvar pg = require('pg'); \n//or native libpq bindings\n//var pg = require('pg').native\n\nvar conString = \"tcp://postgres:1234@localhost/postgres\";\n\n//error handling omitted\npg.connect(conString, function(err, client) {\n  client.query(\"SELECT NOW() as when\", function(err, result) {\n    console.log(\"Row count: %d\",result.rows.length);  // 1\n    console.log(\"Current year: %d\", result.rows[0].when.getFullYear());\n    pg.end(); //terminate the client pool, disconnecting all clients\n  });\n});\n```\n\n### Evented api\n\n```javascript\nvar pg = require('pg'); //native libpq bindings = `var pg = require('pg').native`\nvar conString = \"tcp://postgres:1234@localhost/postgres\";\n\nvar client = new pg.Client(conString);\nclient.connect();\n\n//queries are queued and executed one after another once the connection becomes available\nclient.query(\"CREATE TEMP TABLE beatles(name varchar(10), height integer, birthday timestamptz)\");\nclient.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['Ringo', 67, new Date(1945, 11, 2)]);\nclient.query(\"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\", ['John', 68, new Date(1944, 10, 13)]);\n\n//queries can be executed either via text/parameter values passed as individual arguments\n//or by passing an options object containing text, (optional) parameter values, and (optional) query name\nclient.query({\n  name: 'insert beatle',\n  text: \"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\",\n  values: ['George', 70, new Date(1946, 02, 14)]\n});\n\n//subsequent queries with the same name will be executed without re-parsing the query plan by postgres\nclient.query({\n  name: 'insert beatle',\n  values: ['Paul', 63, new Date(1945, 04, 03)]\n});\nvar query = client.query(\"SELECT * FROM beatles WHERE name = $1\", ['John']);\n\n//can stream row results back 1 at a time\nquery.on('row', function(row) {\n  console.log(row);\n  console.log(\"Beatle name: %s\", row.name); //Beatle name: John\n  console.log(\"Beatle birth year: %d\", row.birthday.getYear()); //dates are returned as javascript dates\n  console.log(\"Beatle height: %d' %d\\\"\", Math.floor(row.height/12), row.height%12); //integers are returned as javascript ints\n});\n\n//fired after last row is emitted\nquery.on('end', function() { \n  client.end();\n});\n```\n\n### Example notes\n\nnode-postgres supports both an 'event emitter' style API and a 'callback' style.  The callback style is more concise and generally preferred, but the evented API can come in handy.  They can be mixed and matched.  The only events which do __not__ fire when callbacks are supplied are the `error` events, as they are to be handled by the callback function.\n\nAll examples will work with the pure javascript bindings (currently default) or the libpq native (c/c++) bindings (currently in beta)\n\nTo use native libpq bindings replace `require('pg')` with `require('pg').native`.\n\nThe two share the same interface so __no other code changes should be required__.  If you find yourself having to change code other than the require statement when switching from `pg` to `pg.native`, please report an issue.\n\n### Info\n\n* pure javascript client and native libpq bindings share _the same api_\n* _heavily_ tested\n  * the same suite of 200+ integration tests passed by both javascript & libpq bindings\n  * benchmark & long-running memory leak tests performed before releases\n  * tested with with\n    * postgres 8.x, 9.x\n    * Linux, OS X\n    * node 2.x & 4.x\n* row-by-row result streaming\n* built-in (optional) connection pooling\n* responsive project maintainer\n* supported PostgreSQL features\n  * parameterized queries\n  * named statements with query plan caching\n  * async notifications\n  * extensible js<->postgresql data-type coercion \n* query queue\n* active development\n* fast\n* close mirror of the node-mysql api for future multi-database-supported ORM implementation ease\n\n### Contributors\n\nMany thanks to the following:\n\n* [creationix](https://github.com/creationix)\n* [felixge](https://github.com/felixge)\n* [pshc](https://github.com/pshc)\n* [pjornblomqvist](https://github.com/bjornblomqvist)\n* [JulianBirch](https://github.com/JulianBirch)\n* [ef4](https://github.com/ef4)\n* [napa3um](https://github.com/napa3um)\n* [drdaeman](https://github.com/drdaeman)\n* [booo](https://github.com/booo)\n* [neonstalwart](https://github.com/neonstalwart)\n* [homme](https://github.com/homme)\n* [bdunavant](https://github.com/bdunavant)\n* [tokumine](https://github.com/tokumine)\n* [shtylman](https://github.com/shtylman)\n* [cricri](https://github.com/cricri)\n* [AlexanderS](https://github.com/AlexanderS)\n* [ahtih](https://github.com/ahtih)\n* [chowey](https://github.com/chowey)\n* [kennym](https://github.com/kennym)\n\n## Documentation\n\nDocumentation is a work in progress primarily taking place on the github WIKI\n\n### [Documentation](https://github.com/brianc/node-postgres/wiki)\n\n### __PLEASE__ check out the WIKI\n\nIf you have a question, post it to the FAQ section of the WIKI so everyone can read the answer\n\n## Production Use\n* [yammer.com](http://www.yammer.com)\n* [bayt.com](http://bayt.com)\n* [bitfloor.com](https://bitfloor.com)\n* [Vendly](http://www.vend.ly)\n\n_if you use node-postgres in production and would like your site listed here, fork & add it_\n\n## Help\n\nIf you need help or run into _any_ issues getting node-postgres to work on your system please report a bug or contact me directly.  I am usually available via google-talk at my github account public email address.\n    \n## License\n\nCopyright (c) 2010 Brian Carlson (brian.m.carlson@gmail.com)\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "pg@0.9.0",
  "_from": "pg"
}
